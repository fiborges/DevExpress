using NormalDistributionReport.Models;
using NormalDistributionReport.Services;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace NormalDistributionReport.Data
{
    internal class ReportData
    {
        public static NormalDistributionReportDTO GenerateReportData()
        {
            var randomnumbers = new Random();
            var sectionScores = new List<EvaluationMetrics>
        {
            new EvaluationMetrics
            {
                EvaluationMetricsId = 1,
                Name = "Parte 1",
                Items = 15,
                StudentScore = 686,
                StudentZScore = 0.810,
                GroupScoreAverage = 530,
                //RangeValue = 4,
                NormalDistributionData = new NormalDistributionData
                {
                    NormalDistributionDataId = 1,
                    SectionName = "Parte 1",
                    Mean = 580,
                    StandardDeviation = 20,
                },
                StudentScoresForHistogram = GenerateZScoreList(0.810, 256, randomnumbers),
                //HistogramInterval = 0.05,
            },
            new EvaluationMetrics
            {
                EvaluationMetricsId = 2,
                Name = "Parte 2",
                Items = 20,
                StudentScore = 705,
                StudentZScore = 0.670,
                GroupScoreAverage = 700,
                //RangeValue = 4,
                NormalDistributionData = new NormalDistributionData
                {
                    NormalDistributionDataId = 2,
                    SectionName = "Parte 2",
                    Mean = 710,
                    StandardDeviation = 25
                },
                StudentScoresForHistogram = GenerateZScoreList(0.230, 256, randomnumbers),
                //HistogramInterval = 0.05,
            },
            new EvaluationMetrics
            {
                EvaluationMetricsId = 3,
                Name = "Parte 3",
                Items = 10,
                StudentScore = 780,
                StudentZScore = 0.770,
                GroupScoreAverage = 670,
                //RangeValue = 4,
                NormalDistributionData = new NormalDistributionData
                {
                    NormalDistributionDataId = 3,
                    SectionName = "Parte 3",
                    Mean = 475,
                    StandardDeviation = 18
                },
                StudentScoresForHistogram = GenerateZScoreList(0.960, 256, randomnumbers),
                //HistogramInterval = 0.05,
            },
            new EvaluationMetrics
            {
                EvaluationMetricsId = 4,
                Name = "Parte 4",
                Items = 18,
                StudentScore = 620,
                StudentZScore = 0.940,
                GroupScoreAverage = 630,
                //RangeValue = 4,
                NormalDistributionData = new NormalDistributionData
                {
                    NormalDistributionDataId = 4,
                    SectionName = "Parte 4",
                    Mean = 625,
                    StandardDeviation = 22
                },
                StudentScoresForHistogram = GenerateZScoreList(0.810, 256, randomnumbers),
                //HistogramInterval = 0.05,
            },
            new EvaluationMetrics
            {
                EvaluationMetricsId = 5,
                Name = "Parte 5",
                Items = 12,
                StudentScore = 550,
                StudentZScore = 0.640,
                GroupScoreAverage = 560,
                //RangeValue = 4,
                NormalDistributionData = new NormalDistributionData
                {
                    NormalDistributionDataId = 5,
                    SectionName = "Parte 5",
                    Mean = 555,
                    StandardDeviation = 15
                },
                StudentScoresForHistogram = GenerateZScoreList(0.770, 256, randomnumbers),
                //HistogramInterval = 0.05,
            }
        };

            var competenceScores = new List<EvaluationMetrics>
            {
                new EvaluationMetrics
                {
                    EvaluationMetricsId = 6,
                    Name = "Pediatria",
                    Items = 5,
                    StudentScore = 482, 
                    StudentZScore = 1.890,
                    GroupScoreAverage = 480,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 6,
                        SectionName = "Pediatria",
                        Mean = 485,
                        StandardDeviation = 10 
                    },
                    StudentScoresForHistogram = new List<double>
                    {
                        0.700, 0.300, 1.290, 0.890, 1.420, 1.250, 0.780, 0.260, 0.440, 0.440,
                        0.570, 0.270, 1.000, 0.570, 0.650, 0.010, 1.340, 0.010, 0.530, 0.900,
                        1.080, 1.080, 0.960, 1.130, 1.380, -0.050, 1.890, 1.290, 0.650, 1.100,
                        1.160, 0.820, 1.240, 0.870, -0.160, 0.630, 0.900, 0.790, 1.350, 1.380,
                        0.750, 1.250, 0.850, 1.610, 0.780, -1.020, 0.520, 1.490, 1.040, 0.420,
                        0.490, 1.390, -0.050, 0.670, 1.040, 1.010, 1.620, 1.700, 0.710, 0.900,
                        -0.240, 0.930, 0.230, -0.880, 1.190, 1.180, 1.170, 0.310, 1.330, 0.170,
                        1.230, -1.010, 0.750, 0.790, 1.060, 0.860, 0.740, 1.090, 0.950, 0.590,
                        0.480, 1.090, -0.190, 1.000, 1.230, 0.760, 1.000, -0.040, 0.790, 1.340,
                        1.130, 0.200, 0.710, -0.100, 0.270, 0.900, -0.520, 1.320, 1.070, 0.500,
                        0.850, 1.700, -0.090, 0.680, 0.880, 0.790, 1.430, 0.960, 1.590, 0.630,
                        0.580, 1.070, 0.720, 1.210, -1.100, 0.240, 1.030, 0.680, 1.610, 0.590,
                        -0.280, 0.300, 0.740, 1.930, 0.620, 1.860, 0.560, 0.380, 0.280, 1.090,
                        0.680, 0.800, 0.420, 0.920, 0.880, 0.560, 0.630, 0.500, 0.800, 0.330,
                        0.410, 0.130, 0.540, 0.740, -0.220, 0.950, 0.820, 0.520, 1.180, 1.130,
                        0.740, 1.280, 0.610, -0.170, -0.400, 1.640, 0.730, 1.000, 1.730, -1.050,
                        -0.060, 0.210, 0.900, 1.200, 1.040, 1.010, 1.470, 0.930, 0.770, 0.790,
                        1.160, 1.560, -0.320, 1.440, 0.350, 0.650, 0.730, -0.130, 0.450, 0.850,
                        1.540, 0.070, 1.320, 1.150, 0.920, 1.200, 0.930, 0.220, 1.000, 0.660,
                        1.060, -2.000, 1.910, 1.120, 0.390, 1.810, 0.200, 0.580, 1.250, 0.990,
                        0.860, 1.780, 0.960, 1.220, 0.430, 1.680, 0.920, 1.110, 1.130, 0.210,
                        0.930, 0.380, 0.380, -0.150, 0.340, 0.740, 0.310, 0.050, 0.940, 1.100,
                        0.670, 1.050, -0.340, 1.850, 1.310, 0.650, 0.370, 0.520, 1.230, 1.250,
                        0.790, 0.670, 0.620, 2.000, 1.170
                    },
                   // HistogramInterval = 0.05,
                },
                new EvaluationMetrics
                {
                    EvaluationMetricsId = 7,
                    Name = "Ginecologia e Obstetrícia",
                    Items = 10,
                    StudentScore = 508,
                    StudentZScore = 2.040,
                    GroupScoreAverage = 500,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 7,
                        SectionName = "Ginecologia e Obstetrícia",
                        Mean = 510,
                        StandardDeviation = 15
                    },
                    StudentScoresForHistogram = new List<double>
                    {
                        0.230, 0.930, 1.240, 1.370, 0.650, 1.220, 0.660, 0.740, 0.490, 0.570,
                        -0.060, 0.290, 1.030, 1.070, 0.180, 0.630, 1.770, -0.040, 1.100, 0.540,
                        0.830, 0.910, 1.790, 0.810, 1.260, 0.090, 2.040, 1.120, 1.130, 1.180,
                        1.060, 0.480, 0.940, 1.750, 0.250, 0.860, 1.450, 1.020, 0.910, 0.420,
                        0.470, 1.130, 0.250, 1.760, 0.450, -1.390, 0.530, 1.420, -0.410, 1.220,
                        0.550, 1.330, -0.720, 0.490, 1.450, 1.060, 1.610, 1.650, 0.730, 0.460,
                        0.900, 0.980, 0.590, 0.080, 0.120, 1.350, 0.740, 0.060, 1.700, 1.690,
                        0.760, 1.130, 1.030, 1.180, 1.540, 1.750, 0.410, 1.020, 0.630, 0.590,
                        1.520, 0.370, 1.020, 0.720, -0.370, 0.860, 0.910, 0.950, 1.280, 0.340,
                        0.390, 0.600, 0.800, 1.300, 0.200, 1.450, 1.870, 0.660, 1.700, 1.200,
                        1.350, 1.020, 1.050, 0.340, 1.140, 1.520, 0.090, 1.200, 1.630, 1.520,
                        1.500, 0.340, 0.060, 0.780, -0.160, 0.870, 1.110, 0.710, 0.920, 1.430,
                        1.180, 1.520, 1.040, 1.070, 0.120, 1.510, -0.550, -1.470, 0.800, 1.050,
                        0.310, 1.020, 0.410, 0.860, 0.910, -0.150, 0.340, 0.870, 1.130, 1.100,
                        1.730, 0.710, 1.170, 1.800, 0.690, 1.800, 0.270, 0.830, 0.630, 1.310,
                        0.710, 0.870, 0.320, 1.500, 1.140, 0.600, 0.220, 1.100, 0.400, 1.580,
                        0.780, 1.220, 0.760, 1.520, 0.410, 1.400, 1.860, 1.110, 0.500, 1.140,
                        1.500, 1.220, 1.700, 1.520, 1.410, 0.860, 1.160, 1.040, 1.670, 0.500,
                        1.370, 1.740, 0.670, 0.240, 1.420, 1.070, 1.630, 1.410, 1.220, 1.070,
                        1.130, 1.370, 1.540, 0.760, 0.580, 1.100, 1.630, 1.300, 1.070, 0.800,
                        0.730, 1.120, 1.110, 1.210, 1.290, 1.280, 0.740, 0.860, 0.450, 1.240,
                        0.990, 1.620, 1.350, 1.580, 1.330, 1.270, 0.710, 0.800, 1.240, 1.110,
                        1.090, 0.550, 1.410, 1.400, 1.670, 1.030, 0.950, 1.510, 1.160, 0.940,
                        1.720, 1.420, 0.380, 1.210, 0.800, 0.640, 0.970, 1.280, 0.830, 1.430
                    },
                    //HistogramInterval = 0.05,
                },
                new EvaluationMetrics
                {
                    EvaluationMetricsId = 8,
                    Name = "Clínica Médica",
                    Items = 8,
                    StudentScore = 530,
                    StudentZScore = 1.900, 
                    GroupScoreAverage = 520,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 8,
                        SectionName = "Clínica Médica",
                        Mean = 535,
                        StandardDeviation = 12
                    },
                    StudentScoresForHistogram = new List<double>
                    {
                        0.960, 0.610, 0.390, 0.650, 0.600, 0.900, 1.240, 0.390, 0.960, 0.340,
                        0.170, 0.010, 0.970, -0.740, 0.270, 0.670, 1.680, 0.010, 0.910, 1.280,
                        0.920, 0.660, 0.760, 0.640, 1.110, 0.400, 1.900, 1.110, 1.030, 1.300,
                        1.540, -0.250, 0.550, 1.190, 0.050, 0.570, 1.030, 0.070, 0.210, 1.170,
                        0.250, 0.760, 0.620, -0.400, 0.540, -0.740, -0.220, 1.320, 1.240, 0.990,
                        0.690, 0.830, 0.010, 0.660, 0.900, 1.210, 0.990, 0.960, -0.130, 0.500,
                        -0.580, 0.940, -0.040, -0.960, 0.520, 1.310, 0.970, 0.120, 0.720, 0.130,
                        1.130, -0.830, 1.310, 0.520, 0.210, 0.230, 0.600, 1.170, 1.200, 1.100,
                        0.270, 0.390, -0.220, 0.870, 1.190, 0.610, 0.670, 0.270, 0.750, 1.130,
                        0.120, 0.810, 0.300, 0.550, -0.050, 1.090, -0.760, 0.740, 1.060, 0.100,
                        0.480, 1.220, 0.900, 0.930, 1.220, 1.020, -0.060, 1.120, 1.110, 1.580,
                        0.810, 1.730, 1.050, 1.440, -1.190, 1.010, 0.720, 0.480, 1.760, 0.700,
                        0.620, -0.180, 1.210, 1.700, 1.020, 0.170, 0.080, 0.440, -0.860, 0.050,
                        0.550, 1.030, 0.200, 1.440, 0.470, 0.740, 1.480, 0.480, 0.700, 0.930,
                        0.610, 0.880, 1.130, 0.880, -1.300, -1.320, 0.830, 1.140, 0.680, -0.290,
                        1.180, 0.760, 1.020, 0.520, 0.120, 0.010, 0.660, 0.880, 0.270, 0.480,
                        0.070, 0.030, 0.580, 0.070, 1.280, -0.470, 0.770, 0.050, 1.900, 0.300,
                        0.590, 0.560, 1.450, -0.700, 0.090, 0.440, 0.740, 0.550, 0.270, 1.270,
                        -0.450, -0.150, 0.100, 0.820, 0.040, 0.790, 0.800, 1.680, 0.740, -0.280,
                        0.190, 0.050, 0.500, 1.050, 1.950, 0.290, 0.340, 0.120, -0.850, 0.720,
                        0.460, 1.290, 0.550, 0.900, 1.510, 0.760, 0.580, 0.670, -0.120, 1.520,
                        0.740, 1.430, -0.700, 1.420, 0.170, 0.610, 1.610, 1.230, 1.260, 1.440,
                        0.660, 0.630, 1.060, 0.320, 0.310, 1.210, 0.780, 0.460, 1.270, 0.970,
                        -0.720, 0.380, 0.110, -0.240, -0.280, 0.720, 0.600, 1.140, 0.340, 0.280,
                        0.340, 1.100, -0.100, -0.300, 1.530, 1.050, 0.260, 0.670, 0.870, 0.720,
                        0.140, 0.720, 0.470, 0.730, 1.710, 1.090
                    },
                    //HistogramInterval = 0.05,
                },

                new EvaluationMetrics
                {
                    EvaluationMetricsId = 9,
                    Name = "Cirurgia / Emergência",
                    Items = 6,
                    StudentScore = 562, 
                    StudentZScore = 1.350,
                    GroupScoreAverage = 555,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 9,
                        SectionName = "Cirurgia / Emergência",
                        Mean = 560,
                        StandardDeviation = 20
                    },
                    StudentScoresForHistogram = new List<double>
                    {
                        0.810, 0.830, 1.190, 1.060, 0.870, 1.100, 0.490, 0.350, 0.760, 0.680,
                        0.520, 0.560, 0.470, 0.360, 0.940, 0.190, 0.680, -0.260, 0.730, 0.370,
                        0.790, 0.780, 0.700, 0.650, 1.050, 0.420, 1.350, 1.090, 0.900, 0.210,
                        1.340, 0.010, 0.950, 1.410, -0.340, 0.560, 0.300, 0.340, 1.670, 1.040,
                        0.000, 0.610, 0.370, 0.880, 0.440, -0.070, 0.190, 1.470, 0.930, 1.040,
                        0.750, 1.040, 0.020, 0.720, 0.690, 0.220, 0.960, 1.830, 0.620, 0.510,
                        0.460, 0.850, 1.170, -0.990, 0.740, 0.750, 0.520, 0.350, 1.020, 0.570,
                        0.650, -1.410, 1.310, 0.700, 0.340, 0.810, 0.640, 1.250, 0.740, 1.070,
                        0.280, 0.470, 0.570, 0.090, 0.870, 0.800, 0.900, 0.560, 0.060, 0.720,
                        0.810, 0.620, 0.680, 1.520, -0.090, 0.990, -0.810, 1.280, 0.580, 0.150,
                        0.620, 1.360, 0.750, 0.980, 0.630, 0.800, 1.350, 1.200, 0.190, 0.550,
                        0.950, 1.230, 0.510, 0.970, -1.220, 0.420, 0.430, 0.050, 1.680, 0.710,
                        0.000, 0.190, 0.110, 1.810, 0.410, 0.380, 0.400, -0.220, -0.410, -0.170,
                        0.870, 0.770, 0.050, 0.980, 1.020, 0.750, 0.840, -0.130, 0.710, 0.350,
                        0.130, 1.320, 0.140, 1.220, -1.010, -1.040, 1.620, 0.900, 1.170, 0.170,
                        0.730, 0.520, 1.250, -0.320, -0.120, 0.700, 0.600, -0.120, 0.300, 0.730,
                        0.410, 0.240, 0.730, 0.270, 1.500, -0.420, -0.200, 0.920, 0.630, 0.710,
                        0.700, 0.580, 1.040, -0.240, -0.560, -0.110, 0.620, 0.990, 1.260, 1.190,
                        -0.150, 0.030, -0.430, 0.560, 0.560, -0.230, 0.840, 1.420, 1.480, 0.320,
                        0.580, 1.140, 1.260, 1.020, 1.390, 0.260, 0.560, 0.590, -0.190, 0.610,
                        0.620, 0.840, 1.160, 0.580, 0.880, -0.370, 1.350, 0.320, 0.360, 0.870,
                        0.700, 1.120, -0.870, 1.010, 0.400, 0.450, 1.590, 0.130, 0.230, 1.080,
                        1.410, 0.800, 1.780, 0.860, 0.890, 0.800, 0.810, 0.130, 1.020, 0.750,
                        -0.630, 0.460, 0.320, -0.210, -0.300, 0.780, 0.700, 0.330, 1.240, 0.330,
                        0.020, 0.720, 0.690, -0.220, 0.860, 1.090, 1.120, 1.760, 1.010, 0.970,
                        0.400, 0.770, 0.970, 0.370, 0.920, 1.060
                    },
                    //HistogramInterval = 0.05,
                },

                new EvaluationMetrics
                {
                    EvaluationMetricsId = 10,
                    Name = "Saúde Coletiva",
                    Items = 7,
                    StudentScore = 480,
                    StudentZScore = 1.670,
                    GroupScoreAverage = 470,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 10,
                        SectionName = "Saúde Coletiva",
                        Mean = 482,
                        StandardDeviation = 18
                    },
                    StudentScoresForHistogram = new List<double>
                    {

                        0.770, 0.520, 1.090, 0.910, 0.940, 0.770, 0.860, 0.100, 1.090, 1.080,
                        0.900, -0.690, 0.630, 0.740, 0.020, 0.270, 1.190, 0.750, 0.540, 0.250,
                        1.650, 0.840, 0.480, 0.540, 1.060, 0.340, 1.670, 0.160, 0.660, 1.040,
                        1.350, -1.060, 0.400, 0.530, 0.140, 0.260, 1.110, 0.410, 1.330, 0.630,
                        0.040, 0.590, 0.910, 0.870, 0.170, -1.180, -0.220, 1.020, 0.570, 0.000,
                        0.880, 0.480, -0.060, 0.010, 0.700, 1.410, 1.350, 1.530, 0.270, -0.220,
                        -0.320, 0.680, 0.880, -0.240, 0.270, 0.940, 0.280, -0.350, 1.920, -0.520,
                        0.510, -1.810, 0.970, 0.520, 1.270, 0.080, 0.550, 0.120, 0.710, 0.830,
                        0.210, 0.070, -0.100, 1.050, 0.490, 1.240, 0.640, 0.980, 0.360, 0.490,
                        0.720, 0.350, 0.240, 0.620, 0.270, 0.360, -0.730, 0.660, 0.570, 0.040,
                        1.230, 1.210, 0.830, 0.690, 1.100, 1.190, 0.700, 1.060, 1.260, 1.110,
                        0.640, 1.260, 0.550, 0.860, -1.600, -0.140, 0.380, 1.550, 1.790, -0.060,
                        0.710, -0.190, 0.280, 1.460, 0.780, 0.620, 0.630, -0.070, 0.130, 1.010,
                        0.570, 1.070, 0.310, 1.440, 0.320, 1.230, 1.130, -0.380, 0.880, 0.590,
                        0.870, 1.580, 0.270, 0.910, -0.710, -1.300, 1.250, 0.470, 0.500, 0.180,
                        1.000, 0.200, 0.910, 0.710, 0.020, 0.880, 1.230, 0.060, 0.820, 1.080,
                        -0.050, 0.060, 0.920, 0.090, 1.330, -1.230, 0.640, 0.560, 0.890, 0.280,
                        0.760, 0.420, 0.550, -0.550, 0.230, -0.260, 0.220, 0.450, 0.480, 1.740,
                        0.490, -0.080, 0.550, 0.900, 0.370, -0.020, 0.100, 1.210, 0.330, -0.780,
                        0.540, 0.550, 0.710, 1.380, 1.060, 0.590, -0.050, 0.360, -0.340, 0.620,
                        0.590, 0.650, -0.080, 1.030, 0.900, 0.700, 0.260, 1.360, 0.420, 1.390,
                        0.330, 0.680, -1.130, 1.620, 0.630, 1.030, 1.710, 0.700, -0.420, 0.480,
                        0.610, 0.860, 1.330, 0.900, 0.200, 0.800, 0.550, -0.290, 0.890, 1.010,
                        -0.520, 0.260, 0.870, -0.330, 0.050, 0.430, 0.710, -0.020, 0.230, 0.840,
                        0.930, 1.060, 0.430, -0.070, 0.480, 2.060, 0.640, 0.580, 0.930, 0.160,
                        -0.280, 1.420, 0.080, 0.620, 0.160, 1.060

                    },
                    //HistogramInterval = 0.05,
                },
            };

            var organScores = new List<EvaluationMetrics>
            {
                new EvaluationMetrics
                {
                    EvaluationMetricsId = 13,
                    Name = "Gestão de doente",
                    Items = 7,
                    StudentScore = 594,
                    StudentZScore = 1.700,
                    GroupScoreAverage = 590,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 13,
                        SectionName = "Gestão de doente",
                        Mean = 595,
                        StandardDeviation = 12
                    },
                    StudentScoresForHistogram = new List<double>
                    {
                        0.790, 0.830, 1.150, 1.280, 1.140, 0.840, 0.940, 0.660, 0.440, 0.460,
                        0.290, 0.560, 1.260, 0.350, 0.850, 0.520, 1.460, -0.050, 1.100, 1.020,
                        1.230, 1.000, 1.040, 1.060, 1.230, 0.360, 1.700, 1.310, 1.100, 1.570,
                        1.370, 0.130, 0.890, 1.180, -0.280, 0.940, 1.120, 0.820, 1.030, 1.270,
                        0.630, 1.210, 0.630, 1.200, 0.670, -0.820, 0.210, 1.420, 0.590, 1.160,
                        0.550, 1.110, -0.250, 0.710, 1.070, 0.990, 1.420, 1.390, 0.660, 0.560,
                        0.230, 0.930, 0.400, -0.550, 0.690, 0.920, 0.760, 0.370, 1.240, 0.360,
                        1.420, -1.400, 1.440, 0.650, 0.670, 0.520, 0.970, 0.770, 0.950, 0.920,
                        0.650, 0.730, 0.010, 1.270, 1.410, 1.090, 0.990, 0.800, 0.640, 0.670,
                        0.590, 0.850, 0.630, 0.700, -0.010, 1.530, -0.160, 0.910, 1.020, 0.590,
                        0.550, 1.210, 0.860, 0.370, 1.110, 1.050, 0.820, 1.460, 0.950, 1.300,
                        1.000, 1.320, 0.720, 1.280, -1.070, 0.650, 0.840, 0.420, 1.690, 0.940,
                        -0.040, 0.160, 0.950, 1.700, 0.970, 0.540, 0.560, 0.150, 0.010, 0.240,
                        0.820, 1.380, 0.310, 1.180, 0.740, 0.990, 0.840, -0.130, 1.120, 0.500,
                        0.800, 1.620, 1.220, 1.050, -1.390, -1.800, 1.390, 1.070, 0.830, 0.330,
                        1.270, 0.720, 0.940, 0.820, -0.080, 0.210, 0.750, 0.410, 0.640, 0.950,
                        0.260, 0.230, 1.040, 0.650, 1.330, -0.320, 0.970, 0.870, 0.830, 0.750,
                        1.040, 0.620, 1.120, -0.290, -0.330, 0.240, 1.130, 0.210, 1.320, 1.730,
                        -0.370, -0.040, 0.330, 1.350, 1.050, 0.180, 0.540, 1.590, 1.150, 0.210,
                        0.760, 0.960, 1.260, 0.920, 1.160, 0.170, 0.500, 0.520, -0.300, 1.200,
                        0.710, 1.130, 0.800, 1.340, 1.550, 0.450, 0.920, 1.050, 0.330, 1.340,
                        0.840, 1.300, -0.810, 1.800, 0.550, 0.780, 1.650, 0.640, 0.980, 1.060,
                        1.090, 0.600, 1.570, 1.230, 0.670, 0.670, 1.180, 0.630, 1.470, 1.140,
                        -0.010, 1.370, 0.130, 0.190, 0.010, 0.040, 1.030, 0.850, 0.400, 0.680,
                        1.120, 1.420, 0.840, -0.560, 1.710, 1.210, 0.610, 0.800, 1.080, 0.970,
                        0.610, 1.190, 0.580, 1.050, 1.260, 1.520

                    },
                    //HistogramInterval = 0.05,
                },
                new EvaluationMetrics
                {
                    EvaluationMetricsId = 14,
                    Name = "Mecanismo de doença",
                    Items = 9,
                    StudentScore = 580,
                    StudentZScore = 1.310,
                    GroupScoreAverage = 575,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 14,
                        SectionName = "Mecanismo de doença",
                        Mean = 585,
                        StandardDeviation = 15
                    },
                    StudentScoresForHistogram = new List<double>
                    {
                        0.500, 0.110, 1.390, 0.430, 0.260, 0.380, 1.120, -0.180, 0.330, 0.340,
                        0.140, -0.790, 0.120, -0.320, -0.230, 0.220, 0.930, 0.250, 0.150, -0.340,
                        0.170, 0.350, 0.180, 0.680, 0.410, -0.150, 1.310, 0.940, 0.770, -0.750,
                        0.670, -0.110, 0.910, 0.840, -0.740, 0.610, 0.420, -0.470, 0.540, 0.130,
                        0.050, 0.530, 0.650, 0.120, -0.360, -0.780, -0.270, 0.360, 0.890, 0.570,
                        0.240, 0.650, -0.320, 0.510, 0.500, 0.940, 0.330, 0.740, -0.140, 0.420,
                        0.240, 0.390, 0.040, -1.040, 0.610, 1.070, 0.520, -0.670, 0.970, -0.550,
                        0.730, -1.020, 0.840, -0.380, 0.010, -0.160, 0.030, 1.860, 1.090, 0.090,
                        -0.160, -0.440, -0.100, 0.290, 0.360, 0.450, 0.980, 0.090, 0.760, 0.530,
                        0.460, -0.030, -0.200, -0.290, -0.910, 0.040, -0.210, 1.030, 1.110, 0.560,
                        0.680, 0.690, 0.120, 0.690, 0.480, 0.190, 1.340, 0.370, 1.230, 1.040,
                        0.920, 1.710, 0.450, 0.360, -1.990, 0.000, 0.100, 0.970, 0.800, -0.110,
                        0.920, -0.410, 0.260, 1.050, 0.210, 0.420, -0.580, 0.300, -0.830, 0.130,
                        0.420, 1.130, 0.320, 0.990, -0.100, 1.190, 1.320, -0.160, 0.360, 0.590,
                        0.640, 0.750, -0.880, 0.740, -1.070, -1.230, -0.170, 0.180, 0.330, -0.350,
                        0.210, 0.540, 0.980, -0.630, 0.210, 1.250, 0.760, 0.350, 0.030, -0.110,
                        0.140, -0.580, 0.380, 0.400, 0.640, -0.790, 0.030, -0.540, 0.930, -0.850,
                        1.120, 0.380, 0.010, -0.330, -0.090, -0.080, 1.080, 0.470, 0.210, 1.250,
                        -1.170, -0.400, -0.600, 0.030, 0.000, 0.880, 0.670, 0.750, 0.180, -0.520,
                        -0.130, -0.280, 0.490, 0.790, 1.470, 0.360, 0.470, -0.240, -0.880, 0.350,
                        -0.460, 0.560, 0.060, -0.070, 0.630, 0.320, 0.630, 0.810, -0.210, 0.890,
                        -0.190, 0.360, -1.490, 1.010, 0.390, 0.590, 1.500, 0.230, 0.140, 0.440,
                        0.420, 0.250, 1.490, 0.570, 0.410, -0.020, 1.420, -0.570, 0.640, -0.080,
                        -1.020, -0.060, 0.070, -0.310, 0.180, -0.730, 0.100, -0.580, 0.160, -0.210,
                        0.460, 0.800, 0.450, -0.210, 1.250, 0.080, 0.240, 0.140, 0.400, 0.240,
                        1.340, 0.630, -0.150, 0.210, 0.930, 0.070
                    },
                    //HistogramInterval = 0.05,
                },
                new EvaluationMetrics
                {
                    EvaluationMetricsId = 15,
                    Name = "Diagnóstico",
                    Items = 8,
                    StudentScore = 610,
                    StudentZScore =2.480,
                    GroupScoreAverage = 600,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 15,
                        SectionName = "Diagnóstico",
                        Mean = 615,
                        StandardDeviation = 18
                    },
                    StudentScoresForHistogram = new List<double>
                    {
                        0.670, 0.610, 0.620, 0.860, 0.760, 1.560, 0.740, 0.330, 1.260, 0.700,
                        0.330, 0.070, 0.520, 0.510, 0.250, 0.280, 1.680, -0.010, 0.690, 0.910,
                        0.990, 0.740, 1.180, 0.280, 1.580, 0.220, 2.480, 0.770, 0.860, 0.910,
                        1.530, 0.210, 0.900, 1.600, 0.450, 0.410, 1.100, 0.350, 1.200, 1.010,
                        0.180, 0.940, 0.600, 0.840, 0.730, -1.020, 0.450, 1.740, 1.090, 0.780,
                        0.890, 1.280, -0.080, 0.940, 1.230, 1.110, 1.650, 2.080, 0.070, 0.570,
                        -0.060, 1.180, 0.970, -1.090, 0.570, 1.730, 1.280, 0.310, 1.720, 0.480,
                        0.940, -1.470, 1.440, 1.150, 1.140, 0.930, 0.660, 1.280, 1.380, 1.410,
                        0.000, 0.930, 0.320, 0.730, 1.400, 0.370, 0.650, 0.700, 0.740, 1.040,
                        0.870, 0.750, 0.710, 0.790, -0.150, 0.620, -1.120, 0.700, 1.310, 0.130,
                        0.620, 2.050, 0.590, 1.220, 0.930, 0.850, 1.260, 1.180, 1.150, 1.270,
                        1.090, 1.730, 0.840, 1.820, -1.130, 0.700, 0.330, 0.530, 2.360, 0.610,
                        0.070, -0.140, 0.490, 2.320, 0.720, 1.050, 0.550, 0.020, 0.030, 0.550,
                        0.680, 0.770, 0.170, 1.350, 0.930, 0.600, 1.330, 0.230, 1.100, 0.490,
                        0.790, 1.720, 0.880, 1.270, -0.480, -1.240, 0.790, 1.240, 0.750, 0.080,
                        1.250, 0.880, 1.100, 0.680, -0.060, 0.410, 0.790, 0.490, 0.810, 0.900,
                        -0.240, 0.060, 0.820, 0.660, 1.850, -0.180, 0.800, 0.550, 1.540, 0.580,
                        0.930, 0.610, 1.760, -0.540, 0.100, -0.070, 0.650, 1.210, 0.820, 1.820,
                        -0.190, 0.250, 0.250, 0.520, 0.920, 0.370, 1.260, 1.980, 1.310, 0.490,
                        0.710, 0.670, 1.070, 1.090, 1.870, 0.720, 0.930, 0.690, -0.310, 0.540,
                        0.900, 1.650, 0.330, 1.300, 1.330, 0.500, 1.180, 0.970, 0.340, 1.400,
                        0.570, 1.540, -1.240, 1.600, 1.060, 0.580, 1.780, 0.940, 0.190, 1.520,
                        0.990, 0.950, 1.740, 0.820, 0.770, 1.100, 0.970, 0.800, 1.090, 1.440,
                        -0.250, 0.130, 0.800, -0.220, 0.020, 1.510, 0.970, 0.950, 0.490, 0.230,
                        0.840, 0.840, 0.800, 0.000, 1.580, 1.550, 1.040, 1.080, 1.080, 0.780,
                        0.070, 0.730, 0.620, 0.770, 1.820, 1.170

                    },
                    //HistogramInterval = 0.05,
                },
                new EvaluationMetrics
                {
                    EvaluationMetricsId = 16,
                    Name = "Sistema de saúde",
                    Items = 10,
                    StudentScore = 622,
                    StudentZScore = 1.350,
                    GroupScoreAverage = 615,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 16,
                        SectionName = "Sistema de saúde",
                        Mean = 625,
                        StandardDeviation = 20
                    },
                    StudentScoresForHistogram = new List<double>
                    {
                        0.900, 0.620, 1.260, 0.810, 1.130, 1.350, 0.670, 0.090, 1.160, 1.170,
                        1.310, -0.450, 1.000, 0.580, 0.070, 0.300, 0.960, 0.620, 0.620, 0.430,
                        1.560, 1.220, 0.840, 1.050, 1.000, 0.340, 1.350, 0.680, 0.500, 0.940,
                        1.440, -0.670, 0.440, 0.590, 0.370, -0.120, 0.820, 0.740, 1.480, 0.820,
                        -0.140, 0.130, 0.670, 0.990, 0.190, -0.890, -0.340, 1.440, 0.420, -0.310,
                        1.090, 0.660, 0.190, -1.050, 0.560, 1.050, 1.220, 1.610, 0.940, -0.080,
                        -0.700, 0.680, 0.530, 0.310, 0.380, 0.710, 0.020, -0.510, 1.250, -0.410,
                        0.660, -0.910, 0.490, 0.600, 1.110, 0.140, 0.320, 0.700, 0.800, 0.750,
                        0.770, 0.500, -0.560, 0.830, 0.570, 1.310, 0.690, 0.720, 0.540, 0.940,
                        1.070, 0.110, 0.090, 1.340, 1.200, 0.550, -1.500, 1.170, 0.120, -0.390,
                        1.200, 1.470, 1.030, 0.960, 0.980, 1.230, 0.570, 0.820, 1.460, 0.750,
                        -0.080, 0.840, 0.420, 0.800, -1.330, -0.490, 0.390, 1.500, 1.080, -0.100,
                        1.030, 0.080, 0.480, 0.810, 0.250, 0.560, 1.100, -0.100, 0.200, 1.040,
                        0.630, 0.870, 0.000, 0.950, 0.780, 0.860, 1.140, 0.050, 0.570, 0.760,
                        0.850, 0.780, -0.370, 0.740, -1.370, -1.140, 1.490, 0.650, 0.360, 0.100,
                        0.980, 0.590, 1.070, 0.780, -0.160, 0.940, 0.860, -0.060, 0.690, 0.500,
                        0.280, 0.220, 1.460, -0.130, 1.610, -0.530, 0.310, 0.710, 0.930, 0.440,
                        1.030, 0.460, 0.820, -0.580, 0.250, -0.760, 0.450, 0.680, 0.600, 1.020,
                        0.310, -0.360, -0.070, 0.800, 0.420, 0.700, -0.220, 1.420, 0.670, -0.640,
                        0.820, 1.060, 0.690, 1.140, 1.830, 0.770, -0.210, 0.500, -0.340, 0.380,
                        0.980, 0.760, 0.310, 0.890, 0.820, 0.950, 0.810, 0.780, 0.230, 1.260,
                        0.780, 1.040, -1.360, 1.810, 0.540, 0.700, 1.600, 0.350, -0.490, 0.650,
                        0.800, 0.400, 1.160, 0.350, 0.160, 0.720, 0.480, 0.010, 0.820, 0.860,
                        -0.710, 0.420, 0.730, 0.160, -0.060, 0.790, 0.330, 0.280, 0.590, 0.910,
                        0.140, 0.690, 0.230, 0.040, 0.490, 1.930, 0.430, 1.080, 0.580, 0.520,
                        -0.020, 1.220, 0.380, 0.520, 0.870, 1.000

                    },
                    //HistogramInterval = 0.05,
                }

            };


            var otherScores = new List<EvaluationMetrics>
            {
                new EvaluationMetrics
                {
                    EvaluationMetricsId = 9,
                    Name = "Research and Evidence based medicine",
                    Items = 6,
                    StudentScore = 604,
                    StudentZScore = -0.15,
                    GroupScoreAverage = 600,
                    //RangeValue = 4,
                    NormalDistributionData = new NormalDistributionData
                    {
                        NormalDistributionDataId = 9,
                        SectionName = "Evidence based medicine",
                        Mean = 605,
                        StandardDeviation = 15
                    },
                    StudentScoresForHistogram = GenerateZScoreList(0.110, 256, randomnumbers),
                    HistogramInterval = 0.05,
                }
            };

            var report = new NormalDistributionReportDTO
            {
                ExamName = "Medical Knowledge Assessment",
                StudentName = "Afonso Ferreira de Brito",
                ExamDate = new DateTime(2024, 5, 28),
                TotalItems = sectionScores.Sum(x => x.Items) + competenceScores.Sum(x => x.Items) +
                             organScores.Sum(x => x.Items) + otherScores.Sum(x => x.Items),
                StudentScore = 760,
                StudentZScore = 2.02,
                GroupScore = 650,
                TotalCategories = sectionScores.Count + competenceScores.Count + organScores.Count + otherScores.Count,
                TotalTopics = 7,
                SectionScores = sectionScores,
                CompetenceScores = competenceScores,
                OrganScores = organScores,
                OtherScores = otherScores,
                GeneralNormalDistributionData = new List<NormalDistributionData>
                {
                    new NormalDistributionData
                    {
                        NormalDistributionDataId = 11,
                        SectionName = "General Overview",
                        Mean = 650,
                        StandardDeviation = 50
                    }
                },
                //RangeValue = 4,
                ClassFinalScores = new List<double>
                {
                    0.810, 0.710, 1.140, 1.080, 1.000, 1.190, 0.950, 0.420, 0.850, 0.670,
                    0.460, 0.090, 0.950, 0.380, 0.470, 0.420, 1.530, 0.100, 0.860, 0.810,
                    1.180, 0.960, 1.040, 0.860, 1.330, 0.280, 2.020, 1.110, 0.990, 1.130,
                    1.480, 0.020, 0.910, 1.300, -0.010, 0.650, 1.080, 0.570, 1.190, 1.090,
                    0.350, 0.980, 0.690, 1.020, 0.550, -0.990, 0.160, 1.530, 0.830, 0.840,
                    0.760, 1.150, -0.160, 0.610, 1.070, 1.130, 1.460, 1.710, 0.460, 0.500,
                    0.020, 1.000, 0.610, -0.710, 0.660, 1.270, 0.860, 0.130, 1.490, 0.200,
                    1.190, -1.440, 1.360, 0.740, 0.870, 0.560, 0.740, 1.150, 1.190, 1.040,
                    0.400, 0.680, 0.020, 1.010, 1.280, 0.900, 0.920, 0.740, 0.740, 0.880,
                    0.800, 0.670, 0.520, 0.760, 0.010, 1.020, -0.690, 0.980, 1.100, 0.350,
                    0.750, 1.570, 0.780, 0.830, 1.050, 1.000, 1.080, 1.270, 1.230, 1.300,
                    0.960, 1.580, 0.750, 1.390, -1.380, 0.480, 0.580, 0.730, 1.870, 0.630,
                    0.290, -0.010, 0.730, 1.860, 0.770, 0.740, 0.540, 0.100, -0.060, 0.480,
                    0.770, 1.200, 0.250, 1.290, 0.770, 0.970, 1.200, 0.000, 1.030, 0.600,
                    0.860, 1.570, 0.750, 1.140, -1.170, -1.620, 1.130, 1.050, 0.740, 0.150,
                    1.210, 0.800, 1.120, 0.670, -0.050, 0.550, 0.860, 0.400, 0.680, 0.830,
                    0.110, 0.090, 1.040, 0.570, 1.590, -0.400, 0.780, 0.640, 1.180, 0.510,
                    1.120, 0.620, 1.260, -0.450, -0.090, -0.040, 0.970, 0.680, 1.030, 1.760,
                    -0.340, -0.040, 0.160, 0.950, 0.870, 0.430, 0.740, 1.740, 1.110, 0.100,
                    0.710, 0.810, 1.130, 1.080, 1.660, 0.490, 0.590, 0.520, -0.420, 0.870,
                    0.730, 1.280, 0.550, 1.210, 1.390, 0.570, 1.040, 1.050, 0.280, 1.420,
                    0.690, 1.350, -1.230, 1.810, 0.750, 0.750, 1.840, 0.710, 0.470, 1.170,
                    1.030, 0.700, 1.710, 0.990, 0.660, 0.800, 1.150, 0.510, 1.280, 1.150,
                    -0.330, 0.760, 0.450, 0.000, 0.030, 0.550, 0.880, 0.700, 0.470, 0.510,
                    0.900, 1.170, 0.760, -0.290, 1.600, 1.410, 0.740, 0.920, 1.020, 0.830,
                    0.610, 1.080, 0.520, 0.870, 1.460, 1.290
                },
                // HistogramInterval = 0.05
                CoverImage = LoadCoverImage(),

            };

            // Função para gerar a lista de Z-scores
            List<double> GenerateZScoreList(double baseZScore, int count, Random random)
            {
                var zScores = new List<double>();
                for (int i = 0; i < count; i++)
                {
                    // Ajuste para gerar valores mais distribuídos em torno do ZScore base
                    double variation = (random.NextDouble() - 0.5) * 3;  // Permite variações de até ±1.5
                    double zScore = baseZScore + variation;
                    zScores.Add(zScore);
                }
                return zScores;
            }

            // Gerar dados de histograma para cada seção
            foreach (var section in report.SectionScores)
            {
                section.HistogramDataPoints = ReportService.GenerateHistogramData(
                    section.StudentScoresForHistogram,
                    section.HistogramInterval
                );
            }

            // Gerar dados de histograma para cada competência
            foreach (var competence in report.CompetenceScores)
            {
                competence.HistogramDataPoints = ReportService.GenerateHistogramData(
                    competence.StudentScoresForHistogram,
                    competence.HistogramInterval
                );
            }

            // Gerar dados de histograma para cada sistema de órgão
            foreach (var organ in report.OrganScores)
            {
                organ.HistogramDataPoints = ReportService.GenerateHistogramData(
                    organ.StudentScoresForHistogram,
                    organ.HistogramInterval
                );
            }

            // Gerar dados de histograma para outras categorias
            foreach (var other in report.OtherScores)
            {
                other.HistogramDataPoints = ReportService.GenerateHistogramData(
                    other.StudentScoresForHistogram,
                    other.HistogramInterval
                );
            }

            report.HistogramDataPoints = ReportService.GenerateHistogramData(
                report.ClassFinalScores,
                report.HistogramInterval
            );




            FillMetricNames(sectionScores, "Section");
            FillMetricNames(competenceScores, "Competence");
            FillMetricNames(organScores, "Organ");
            FillMetricNames(otherScores, "Other");

            foreach (var section in sectionScores)
            {
                CalculateDistributionCoordinates(section.NormalDistributionData, report.RangeValue);
            }

            foreach (var section in competenceScores)
            {
                CalculateDistributionCoordinates(section.NormalDistributionData, report.RangeValue);
            }

            foreach (var section in organScores)
            {
                CalculateDistributionCoordinates(section.NormalDistributionData, report.RangeValue);
            }

            foreach (var section in otherScores)
            {
                CalculateDistributionCoordinates(section.NormalDistributionData, report.RangeValue);
            }

            foreach (var generalData in report.GeneralNormalDistributionData)
            {
                CalculateDistributionCoordinates(generalData, report.RangeValue);
            }

            return report;
        }

        private static byte[] LoadCoverImage()
        {
            var imagePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "images", "logo.png");
            imagePath = Path.GetFullPath(imagePath);
            Console.WriteLine($"Tentando carregar imagem de: {imagePath}");

            if (File.Exists(imagePath))
            {
                try
                {
                    byte[] imageData = File.ReadAllBytes(imagePath);
                    Console.WriteLine($"Imagem carregada com sucesso. Tamanho: {imageData.Length} bytes");
                    return imageData;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Erro ao ler a imagem: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("A imagem da capa não foi encontrada.");
            }

            return null;
        }


        private static void FillMetricNames(List<EvaluationMetrics> metrics, string sectionType)
        {
            foreach (var metric in metrics)
            {
                metric.MetricName = $"{sectionType}";
            }
        }
        public static void CalculateDistributionCoordinates(NormalDistributionData data, double rangeValue)
        {
            int points = 20; // Número de pontos
            double step = 2 * rangeValue / points; // Usar desvios-padrão para o intervalo de -rangeValue a +rangeValue

            for (int i = 0; i < points; i++)
            {
                double x = -rangeValue + i * step;
                double y = (1 / (data.StandardDeviation * Math.Sqrt(2 * Math.PI))) *
                           Math.Exp(-Math.Pow(x, 2) / 2); // Cálculo da curva normal padronizada

                data.DistributionPoints.Add(new DistributionPoint { X = x, Y = y });
            }
        }
    }
}

